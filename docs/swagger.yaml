definitions:
  AuthenticateRequest:
    properties:
      password:
        type: string
      usernameOrEmailAddress:
        type: string
    required:
    - password
    - usernameOrEmailAddress
    type: object
  AuthenticateResult:
    properties:
      accessToken:
        type: string
      expireInSeconds:
        type: integer
      refreshToken:
        type: string
      refreshTokenExpireInSeconds:
        type: integer
    type: object
  CreateOrEditRoleDto:
    properties:
      grantedPermissions:
        items:
          type: string
        type: array
      id:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  CreateOrEditUserDto:
    properties:
      email:
        maxLength: 256
        type: string
      firstName:
        maxLength: 64
        minLength: 3
        type: string
      id:
        type: integer
      lastName:
        maxLength: 64
        minLength: 3
        type: string
      password:
        type: string
      roleIds:
        items:
          type: integer
        type: array
      userName:
        maxLength: 256
        minLength: 8
        type: string
    required:
    - email
    - firstName
    - lastName
    - userName
    type: object
  CreateRoleDto:
    properties:
      grantedPermissions:
        items:
          type: string
        type: array
      id:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  CreateUserDto:
    properties:
      email:
        maxLength: 256
        type: string
      firstName:
        maxLength: 64
        minLength: 3
        type: string
      id:
        type: integer
      lastName:
        maxLength: 64
        minLength: 3
        type: string
      password:
        type: string
      roleIds:
        items:
          type: integer
        type: array
      userName:
        maxLength: 256
        minLength: 8
        type: string
    required:
    - email
    - firstName
    - lastName
    - userName
    type: object
  EditRoleDto:
    properties:
      grantedPermissions:
        items:
          type: string
        type: array
      id:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  EditUserDto:
    properties:
      email:
        maxLength: 256
        type: string
      firstName:
        maxLength: 64
        minLength: 3
        type: string
      id:
        type: integer
      lastName:
        maxLength: 64
        minLength: 3
        type: string
      password:
        type: string
      roleIds:
        items:
          type: integer
        type: array
      userName:
        maxLength: 256
        minLength: 8
        type: string
    required:
    - email
    - firstName
    - lastName
    - userName
    type: object
  GetAllPermissionResult:
    properties:
      items:
        items:
          $ref: '#/definitions/PermissionGroupDto'
        type: array
    type: object
  GetCurrentSessionResult:
    properties:
      allPermissions:
        additionalProperties:
          type: boolean
        type: object
      grantedPermissions:
        additionalProperties:
          type: boolean
        type: object
      user:
        $ref: '#/definitions/UserLoginInfoDto'
    type: object
  GetRoleByIdResult:
    properties:
      role:
        $ref: '#/definitions/CreateOrEditRoleDto'
    type: object
  GetRolesResult:
    properties:
      items:
        items:
          $ref: '#/definitions/RoleDto'
        type: array
      totalCount:
        type: integer
    type: object
  GetUserByIdResult:
    properties:
      user:
        $ref: '#/definitions/CreateOrEditUserDto'
    type: object
  GetUsersResult:
    properties:
      items:
        items:
          $ref: '#/definitions/UserDto'
        type: array
      totalCount:
        type: integer
    type: object
  PermissionDto:
    properties:
      displayName:
        type: string
      isGranted:
        type: boolean
      name:
        type: string
    type: object
  PermissionGroupDto:
    properties:
      groupName:
        type: string
      permissions:
        items:
          $ref: '#/definitions/PermissionDto'
        type: array
    type: object
  RefreshTokenRequest:
    properties:
      token:
        minLength: 10
        type: string
    required:
    - token
    type: object
  RefreshTokenResult:
    properties:
      accessToken:
        type: string
      expireInSeconds:
        type: integer
    type: object
  RoleDto:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  UpdateUserPermissionDto:
    properties:
      grantedPermissions:
        items:
          type: string
        type: array
    type: object
  UserDto:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      userName:
        type: string
    type: object
  UserLoginInfoDto:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      userName:
        type: string
    type: object
  UserPermissionsResult:
    properties:
      items:
        items:
          type: string
        type: array
    type: object
info:
  contact: {}
paths:
  /api/v1/accounts/app-permissions:
    get:
      consumes:
      - application/json
      description: Get All App Permissions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetAllPermissionResult'
      security:
      - ApiKeyAuth: []
      summary: Get All App Permissions
      tags:
      - Accounts
  /api/v1/accounts/authenticate:
    post:
      consumes:
      - application/json
      description: Authenticate
      parameters:
      - description: AuthenticateRequest
        in: body
        name: AuthenticateRequest
        required: true
        schema:
          $ref: '#/definitions/AuthenticateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuthenticateResult'
      security:
      - ApiKeyAuth: []
      summary: Authenticate
      tags:
      - Accounts
  /api/v1/accounts/current-session:
    get:
      consumes:
      - application/json
      description: Get Current User Session
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetCurrentSessionResult'
      security:
      - ApiKeyAuth: []
      summary: Get Current User Session
      tags:
      - Accounts
  /api/v1/accounts/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh access token
      parameters:
      - description: RefreshTokenRequest
        in: body
        name: RefreshTokenRequest
        required: true
        schema:
          $ref: '#/definitions/RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/RefreshTokenResult'
      security:
      - ApiKeyAuth: []
      summary: Refresh access token
      tags:
      - Accounts
  /api/v1/accounts/sign-out:
    post:
      consumes:
      - application/json
      description: Sign out
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Sign out
      tags:
      - Accounts
  /api/v1/role:
    post:
      consumes:
      - application/json
      description: Create new role
      parameters:
      - description: CreateRoleDto
        in: body
        name: CreateRoleDto
        schema:
          $ref: '#/definitions/CreateRoleDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/RoleDto'
      security:
      - ApiKeyAuth: []
      summary: Create new role
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Update role
      parameters:
      - description: EditRoleDto
        in: body
        name: EditRoleDto
        schema:
          $ref: '#/definitions/EditRoleDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/RoleDto'
      security:
      - ApiKeyAuth: []
      summary: Update role
      tags:
      - Roles
  /api/v1/role/{roleId}:
    delete:
      consumes:
      - application/json
      description: Delete role
      parameters:
      - description: Role Id
        in: path
        name: roleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Delete role
      tags:
      - Roles
    get:
      consumes:
      - application/json
      description: Get role by id
      parameters:
      - description: Role Id
        in: path
        name: roleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetRoleByIdResult'
      security:
      - ApiKeyAuth: []
      summary: Get role by id
      tags:
      - Roles
  /api/v1/roles:
    get:
      consumes:
      - application/json
      description: Get all roles
      parameters:
      - in: query
        name: filters
        type: string
      - in: query
        name: maxResultCount
        type: integer
      - in: query
        name: skipCount
        type: integer
      - in: query
        name: sorting
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetRolesResult'
      security:
      - ApiKeyAuth: []
      summary: Get all roles
      tags:
      - Roles
  /api/v1/user:
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: CreateUserDto
        in: body
        name: CreateUserDto
        schema:
          $ref: '#/definitions/CreateUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserDto'
      security:
      - ApiKeyAuth: []
      summary: Create new user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: EditUserDto
        in: body
        name: EditUserDto
        schema:
          $ref: '#/definitions/EditUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserDto'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - Users
  /api/v1/user/{userId}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: User Id
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get user by id
      parameters:
      - description: User Id
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetUserByIdResult'
      security:
      - ApiKeyAuth: []
      summary: Get user by id
      tags:
      - Users
  /api/v1/user/{userId}/permissions:
    get:
      consumes:
      - application/json
      description: Get user permissions
      parameters:
      - description: User Id
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserPermissionsResult'
      security:
      - ApiKeyAuth: []
      summary: Get user permissions
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user permissions
      parameters:
      - description: User Id
        in: path
        name: userId
        required: true
        type: integer
      - description: UpdateUserPermissionDto
        in: body
        name: UpdateUserPermissionDto
        schema:
          $ref: '#/definitions/UpdateUserPermissionDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Update user permissions
      tags:
      - Users
  /api/v1/user/{userId}/reset-permissions:
    put:
      consumes:
      - application/json
      description: Reset user permissions
      parameters:
      - description: User Id
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Reset user permissions
      tags:
      - Users
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - in: query
        name: filters
        type: string
      - in: query
        name: maxResultCount
        type: integer
      - in: query
        name: skipCount
        type: integer
      - in: query
        name: sorting
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetUsersResult'
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
